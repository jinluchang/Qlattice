# cython: binding=True, embedsignature=True, c_string_type=unicode, c_string_encoding=utf8

{{py:
type_name_list = [
    'ColorMatrix',
    'WilsonMatrix',
    'NonRelWilsonMatrix',
    'IsospinMatrix',
    'SpinMatrix',
    'WilsonVector',
    'ComplexD',
    'ComplexF',
    'RealD',
    'RealF',
    'Long',
    'Int',
    'Int64t',
    'Int32t',
    'Int8t',
    'Char',
    ]
real_d_type_name_list = [
    'ColorMatrix',
    'WilsonMatrix',
    'NonRelWilsonMatrix',
    'IsospinMatrix',
    'SpinMatrix',
    'WilsonVector',
    'ComplexD',
    'RealD',
    ]
real_f_type_name_list = [
    'ComplexF',
    'RealF',
    ]
long_type_name_list = [
    'Long',
    'Int64t',
    ]
int_type_name_list = [
    'Int',
    'Int32t',
    ]
}}

from qlat_utils.all cimport *
from . cimport everything as cc
from cpython cimport Py_buffer
from cpython.buffer cimport PyBUF_FORMAT
from .geometry cimport Geometry
from .field_selection cimport FieldSelection, PointsSelection, SelectedShufflePlan
from .field_types cimport *
from .selected_field_types cimport *

import qlat_utils as q
import numpy as np

from .field_type_dict import selected_points_type_dict

### -------------------------------------------------------------------

{{for name in type_name_list}}

cdef void set_field_sp_sp_{{name}}(SelectedPoints{{name}} self, SelectedPoints{{name}} other):
    """
    Two psel may or may NOT be the same object
    All points need to be set.
    """
    cc.set_selected_points(self.xx, other.xx, self.psel.xx, other.psel.xx)

cdef void set_field_sp_sf_{{name}}(SelectedPoints{{name}} self, SelectedField{{name}} other):
    """
    only assign available points
    """
    cc.set_selected_points(self.xx, other.xx, self.psel.xx, other.fsel.xx)

cdef void set_field_sp_f_{{name}}(SelectedPoints{{name}} self, Field{{name}} other):
    cc.set_selected_points(self.xx, other.xx, self.psel.xx)

cdef class SelectedPoints{{name}}(SelectedPointsBase):

    """
    self.cdata
    self.psel
    """

    ctype = ElemType{{name}}

    def __cinit__(self):
        self.cdata = <cc.Long>&(self.xx)
        self.view_count = 0

    def __init__(self, *args):
        """
        SelectedPoints()
        SelectedPoints(n_points, multiplicity, points_dist_type)
        SelectedPoints(psel)
        SelectedPoints(psel, multiplicity)
        SelectedPoints(sp, ssp) # via `shuffle_selected_points` where ssp = SelectedShufflePlan("r_from_l", psel, rs)
        SelectedPoints(sp, ssp, is_reverse) # via `shuffle_selected_points` where ssp = SelectedShufflePlan("r_from_l", psel, rs)
        SelectedPoints(sf, ssp) # via `shuffle_selected_field` where ssp = SelectedShufflePlan("r_from_l", psel, rs)
        #
        points_dist_type in [ "g", "f", "l", "r", "o", ]
        """
        if self.view_count > 0:
            raise ValueError("can't re-init while being viewed")
        self.psel = None
        self.xx.init()
        if len(args) == 0:
            return
        elif isinstance(args[0], int):
            self.init_from_n_points(*args)
        elif isinstance(args[0], PointsSelection):
            self.init_from_psel(*args)
        elif isinstance(args[0], SelectedPoints{{name}}):
            self.init_from_sp_ssp(*args)
        elif isinstance(args[0], SelectedField{{name}}):
            self.init_from_sf_ssp(*args)
        else:
            raise Exception(f"SelectedPoints.__init__ {args}")

    def init_from_n_points(self, cc.Long n_points, cc.Int multiplicity, str points_dist_type):
        self.xx.init(n_points, multiplicity, cc.read_points_dist_type(points_dist_type))

    def init_from_psel(self, PointsSelection psel, cc.Int multiplicity=0):
        self.psel = psel
        if multiplicity != 0:
            self.xx.init(psel.xx, multiplicity)

    def init_from_sp_ssp(self, SelectedPoints{{name}} sp, SelectedShufflePlan ssp=None, bint is_reverse=False):
        if ssp is None:
            self @= sp
            return
        sp_dst = ssp.shuffle_sp(SelectedPoints{{name}}, sp, is_reverse=is_reverse)
        self.swap(sp_dst)

    def init_from_sf_ssp(self, SelectedField{{name}} sf, SelectedShufflePlan ssp):
        assert len(ssp.psel_send_list) == 1
        assert len(ssp.psel_recv_list) == 1
        self.psel = PointsSelection(sf.fsel, ssp)
        if self.psel == ssp.psel_recv_list[0]:
            self.psel = ssp.psel_recv_list[0]
        cc.shuffle_selected_field(self.xx, sf.xx, ssp.xx)

    def __getbuffer__(self, Py_buffer *buffer, int flags):
        cdef int ndim = 2 + ElemType{{name}}.ndim()
        cdef Buffer buf = Buffer(self, ndim)
        buf.format = ElemType{{name}}.format()
        buf.itemsize = ElemType{{name}}.itemsize()
        buf.buf = <char*>(self.xx.points.data())
        buf.set_dim_size(0, self.xx.n_points)
        buf.set_dim_size(1, self.xx.multiplicity)
        cdef cc.std_vector[Py_ssize_t] vec = ElemType{{name}}.shape()
        cdef int dim_size = vec.size()
        cdef int dim
        for dim in range(dim_size):
            buf.set_dim_size(2 + dim, vec[dim])
        buf.update_strides_from_shape()
        buf.set_buffer(buffer, flags)
        self.view_count += 1

    def release_buffer(self, Buffer buf):
        assert buf.obj is self
        self.view_count -= 1

    def __imatmul__(self, other):
        """
        won't change self.psel
        #
        two psel may or may NOT be the same object
        #
        only assign available points
        """
        if isinstance(other, SelectedPoints{{name}}):
            set_field_sp_sp_{{name}}(self, other)
        elif isinstance(other, SelectedField{{name}}):
            set_field_sp_sf_{{name}}(self, other)
        elif isinstance(other, Field{{name}}):
            set_field_sp_f_{{name}}(self, other)
        else:
            raise Exception(f"SelectedPoints{{name}} @= type mismatch {type(self)} {type(other)}")
        return self

    @q.timer
    def copy(self, cc.Bool is_copying_data=True):
        f = type(self)(self.psel)
        if is_copying_data:
            f @= self
        return f

    @q.timer
    def set_zero(self):
        cc.set_zero(self.xx)

    def swap(self, SelectedPoints{{name}} f1):
        cdef PointsSelection psel = self.psel
        self.psel = f1.psel
        f1.psel = psel
        cc.qswap(self.xx, f1.xx)

    def swap_cast(self, SelectedPointsChar f1):
        cdef PointsSelection psel = self.psel
        self.psel = f1.psel
        f1.psel = psel
        cc.qswap_cast(self.xx, f1.xx)

    def save(self, const cc.std_string& path):
        cc.save_selected_points(self.xx, path)

    def load(self, const cc.std_string& path):
        cc.load_selected_points(self.xx, path)

    def save_str(self):
        """
        only return str at node 0
        """
        return <bytes>cc.save_selected_points_str(self.xx)

    def load_str(self, bytes content):
        """
        only need str at node 0
        """
        cdef cc.std_string content_std_str = content
        return cc.load_selected_points_str(self.xx, content_std_str)

{{if name in real_d_type_name_list}}
    def to_lat_data(self):
        cdef LatData ld = LatData()
        cc.lat_data_from_selected_points(ld.xx, self.xx)
        return ld
{{elif name in real_f_type_name_list}}
    def to_lat_data(self):
        cdef LatDataRealF ld = LatDataRealF()
        cc.lat_data_from_selected_points(ld.xx, self.xx)
        return ld
{{elif name in long_type_name_list}}
    def to_lat_data(self):
        cdef LatDataLong ld = LatDataLong()
        cc.lat_data_from_selected_points(ld.xx, self.xx)
        return ld
{{elif name in int_type_name_list}}
    def to_lat_data(self):
        cdef LatDataInt ld = LatDataInt()
        cc.lat_data_from_selected_points(ld.xx, self.xx)
        return ld
{{endif}}

{{if name in real_d_type_name_list}}
    def from_lat_data(self, LatData ld not None):
        cc.selected_points_from_lat_data(self.xx, ld.xx)
{{elif name in real_f_type_name_list}}
    def from_lat_data(self, LatDataRealF ld not None):
        cc.selected_points_from_lat_data(self.xx, ld.xx)
{{elif name in long_type_name_list}}
    def from_lat_data(self, LatDataLong ld not None):
        cc.selected_points_from_lat_data(self.xx, ld.xx)
{{elif name in int_type_name_list}}
    def from_lat_data(self, LatDataInt ld not None):
        cc.selected_points_from_lat_data(self.xx, ld.xx)
{{endif}}

    @property
    def points_dist_type(self):
        """
        points_dist_type in [ "g", "l", "r", ]
        """
        return cc.show(self.xx.points_dist_type)

    @points_dist_type.setter
    def points_dist_type(self, str value):
        """
        set the points_dist_type flag
        """
        self.xx.points_dist_type = cc.read_points_dist_type(value)

    @property
    def n_points(self):
        return self.xx.n_points

    @property
    def multiplicity(self):
        return self.xx.multiplicity

    @property
    def sizeof_m(self):
        return ElemType{{name}}.size()

    @property
    def geo(self):
        return self.psel.geo

    def __iadd__(self, SelectedPoints{{name}} f):
        cc.iadd_direct(self.xx, f.xx)
        return self

    def __isub__(self, SelectedPoints{{name}} f):
        cc.isub_direct(self.xx, f.xx)
        return self

    def __imul__(self, f):
        cdef double fd
        cdef cc.PyComplexD fc
        if isinstance(f, float):
            fd = f
            cc.imul_direct(self.xx, fd)
        elif isinstance(f, complex):
            fc = f
            cc.imul_direct(self.xx, cc.ccpy_d(fc))
        else:
            raise Exception(f"SelectedPoints.__imul__(self, f={f})")
        return self

    def qnorm(self):
        return cc.qnorm(self.xx)

    def qnorm_field(self):
        cdef SelectedPointsRealD f_n = SelectedPointsRealD(self.psel)
        cc.qnorm_field(f_n.xx, self.xx)
        return f_n

    @q.timer
    def set_rand(self, RngState rng, cc.RealD upper=1.0, cc.RealD lower=0.0):
        return cc.set_u_rand(self.xx, self.psel.xx, rng.xx, upper, lower)

    @q.timer
    def set_rand_g(self, RngState rng, cc.RealD center=0.0, cc.RealD sigma=1.0):
        return cc.set_g_rand(self.xx, self.psel.xx, rng.xx, center, sigma)

    def __getstate__(self):
        """
        Only work when single node (or if all nodes has the same data).
        """
        return super().__getstate__()

    def __setstate__(self, state):
        """
        Only work when single node (or if all nodes has the same data).
        """
        super().__setstate__(state)

###

selected_points_type_dict[ElemType{{name}}] = SelectedPoints{{name}}

{{endfor}}

### -------------------------------------------------------------------
