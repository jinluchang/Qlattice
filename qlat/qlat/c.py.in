{{py:
type_name_list = [
    'ColorMatrix',
    'WilsonMatrix',
    'NonRelWilsonMatrix',
    'IsospinMatrix',
    'SpinMatrix',
    'WilsonVector',
    'ComplexD',
    'ComplexF',
    'RealD',
    'RealF',
    'Long',
    'Int',
    'Int64t',
    'Int32t',
    'Int8t',
    'Char',
    ]
}}

### -------------------------------------------------------------------------

__all__ = []

__all__ += [
        'begin',
        'end',
        'get_size_node',
        'get_coor_node',
        'bcast_long',
        'bcast_double',
        'bcast_complex',
        'bcast_lat_data',
        'glb_sum_long',
        'glb_sum_double',
        'glb_sum_complex',
        'glb_sum_lat_data',
        'glb_sum_np',
        'glb_sum',
        ]

__all__ += [
        'Geometry',
        'geo_resize',
        'geo_eo',
        ]

{{for name in type_name_list}}
__all__ += [
        'Field{{name}}',
        'SelectedField{{name}}',
        'SelectedPoints{{name}}',
        ]
{{endfor}}

__all__ += [
        'Field',
        'FieldBase',
        'SelectedField',
        'SelectedFieldBase',
        'SelectedPoints',
        'SelectedPointsBase',
        ]

__all__ += [
        'SelectedShufflePlan',
        ]

__all__ += [
        'PointsSelection',
        'FieldSelection',
        'mk_xg_field',
        'get_psel_tslice',
        'is_matching_fsel',
        ]

__all__ += [
        'field_ctypes_complex',
        'field_ctypes_double',
        'field_ctypes_float',
        'field_ctypes_long',
        ]

__all__ += [
        'split_fields',
        'merge_fields',
        'merge_fields_ms',
        'mk_merged_fields_ms',
        ]

__all__ += [
        'obtained_lock_history_list',
        'release_lock',
        'obtain_lock',
        'qquit',
        'check_time_limit',
        'check_stop',
        ]

__all__ += [
        'field_expanded',
        'refresh_expanded',
        'refresh_expanded_1',
        'CommPlan',
        'make_field_expand_comm_plan',
        'mk_phase_field',
        'FastFourierTransform',
        'mk_fft',
        'qnorm_field',
        'sqrt_field',
        ]

__all__ += [
        'GaugeField',
        'GaugeTransform',
        'gf_show_info',
        'gf_avg_plaq',
        'gf_avg_spatial_plaq',
        'gf_avg_link_trace',
        'gf_wilson_line_no_comm',
        'gf_wilson_lines_no_comm',
        'gf_avg_wilson_loop_normalized_tr',
        'set_g_rand_color_matrix_field',
        'gf_twist_boundary_at_boundary',
        'mk_left_expanded_gauge_field',
        ]

__all__ += [
        'Prop',
        'SelProp',
        'PselProp',
        'FermionField4d',
        'set_point_src',
        'set_wall_src',
        'mk_point_src',
        'mk_wall_src',
        'mk_rand_vol_u1',
        'mk_rand_vol_u1_src',
        'mk_rand_u1_src',
        'get_rand_u1_sol',
        'mk_rand_u1_prop',
        'free_invert',
        'convert_mspincolor_from_wm',
        'convert_wm_from_mspincolor',
        'mk_ff_list_from_prop',
        'mk_prop_from_ff_list',
        'flip_tpbc_with_tslice',
        'free_scalar_invert_mom_cfield',
        'free_scalar_invert_cfield',
        ]

__all__ += [
        'gf_ape_smear',
        'gf_spatial_ape_smear',
        'gf_hyp_smear',
        'prop_smear',
        'prop_spatial_smear_no_comm',
        ]

__all__ += [
        'gf_plaq_action_density_field',
        'gf_plaq_action_density',
        'gf_spatial_plaq_action_density_field',
        'gf_spatial_plaq_action_density',
        'gf_topology_field_clf',
        'gf_topology_clf',
        'gf_topology_field',
        'gf_topology',
        'gf_topology_terms_field',
        'gf_topology_terms',
        'smear_measure_topo',
        ]

__all__ += [
        'gf_energy_density_field',
        'gf_energy_density',
        'gf_wilson_flow_force',
        'gf_wilson_flow_step',
        'gf_energy_derivative_density_field',
        'gf_wilson_flow',
        ]

__all__ += [
        'GaugeAction',
        ]

__all__ += [
        'GaugeMomentum',
        'set_rand_gauge_momentum',
        'set_rand_gauge_momentum_fa',
        'gm_hamilton_node',
        'gm_hamilton_node_fa',
        'gf_hamilton_node',
        'gf_evolve',
        'gf_evolve_dual',
        'gf_evolve_fa',
        'gf_evolve_fa_dual',
        'set_gm_force',
        'set_gm_force_dual',
        'project_gauge_transform',
        'dot_gauge_momentum',
        'metropolis_accept',
        'gm_evolve_fg_pure_gauge',
        'run_hmc_evolve_pure_gauge',
        'run_hmc_pure_gauge',
        ]

__all__ += [
        'has_cuba',
        'test_integration_multi_dimensional',
        'clear_muon_line_interpolations',
        'get_number_of_muon_line_interpolations',
        'compute_save_muonline_interpolation',
        'load_multiple_muonline_interpolations',
        'get_muon_line_m_extra_weights',
        'set_muon_line_m_extra_weights',
        'calc_muon_line_m',
        'get_muon_line_m',
        'get_muon_line_m_extra',
        'get_muon_line_m_extra_lat',
        ]

__all__ += [
        'mk_m_z_field_tag',
        'contract_four_pair_labels',
        'contract_two_plus_two_pair_labels',
        'mk_local_current_from_props',
        'mk_psel_d_prob_xy',
        'CurrentMoments',
        'contract_four_pair_no_glb_sum',
        'contract_two_plus_two_pair_no_glb_sum',
        ]

__all__ += [
        'ShuffledFieldsWriter',
        'ShuffledFieldsReader',
        'ShuffledBitSet',
        'open_fields',
        'list_fields',
        'fields_build_index',
        'properly_truncate_fields',
        'truncate_fields',
        'check_fields',
        'check_compressed_eigen_vectors',
        'eigen_system_repartition',
        'show_all_shuffled_fields_writer',
        ]

### -------------------------------------------------------------------------

from qlat_utils.c import *

import ctypes
import sys
import os
flags = sys.getdlopenflags()
sys.setdlopenflags(flags | os.RTLD_GLOBAL)

lib_path = os.path.join(os.path.dirname(__file__),
                        'lib/libqlat.so')

if not os.path.isfile(lib_path):
    lib_path = os.path.join(os.path.dirname(__file__),
                            'lib/libqlat.dylib')

assert os.path.isfile(lib_path)

ctypes.CDLL(lib_path, mode=ctypes.RTLD_GLOBAL)

from cqlat import *
from .utils_io import *
from .mpi import *
from .geometry import *
from .field_base import *
from .field_types import *
from .field_selection import *
from .selected_field_types import *
from .selected_points_types import *
from .field_utils import *
from .qcd import *
from .propagator import *
from .smear import *
from .hmc import *
from .gauge_action import *
from .topology import *
from .wilson_flow import *
from .muon_line import *
from .hlbl_contract import *
from .fields_io import *

sys.setdlopenflags(flags)
